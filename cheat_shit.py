üî• OK, je vois exactement ce que tu veux faire.
On va structurer √ßa proprement pour que ce soit modulaire, scalable et r√©utilisable.


---

üìå Plan des fonctions

1Ô∏è‚É£ retrieve_audio_files

üëâ Objectif : R√©cup√©rer les fichiers √† traiter en comparant RootData et AdvisorVoice (ou ClientVoice).
üîπ Entr√©es :

root_path ‚Üí Dossier o√π sont les fichiers Rodata.

saving_path ‚Üí Dossier o√π les fichiers extraits (AdvisorVoice ou ClientVoice) sont enregistr√©s.

audio_extension ‚Üí Extension des fichiers audio √† traiter (mp3, wav, etc.).


üîπ Sortie :

Liste des fichiers audio non encore trait√©s.



---

2Ô∏è‚É£ audio_batch_extraction

üëâ Objectif : Extraire les canaux audio des fichiers trouv√©s par retrieve_audio_files en parall√®le.
üîπ Entr√©es :

saving_path ‚Üí O√π sauvegarder les fichiers extraits.

min_audio_duration ‚Üí Dur√©e minimale d‚Äôun fichier valide.

advisor_channel_to_extract ‚Üí 0 ou 1 pour choisir le canal (advisor/client).

batch_size (par d√©faut 10) ‚Üí Nombre de fichiers trait√©s par lot.

parallel_jobs (par d√©faut 4) ‚Üí Nombre de processus parall√®les.



---

üìå Code complet

import os
from joblib import Parallel, delayed
from pydub import AudioSegment
from pydub.exceptions import CouldntDecodeError
import noisereduce as nr
import numpy as np

### 1Ô∏è‚É£ Fonction pour r√©cup√©rer les fichiers √† traiter ###
def retrieve_audio_files(root_path, saving_path, audio_extension="mp3"):
    """
    R√©cup√®re les fichiers audio qui n'ont pas encore √©t√© trait√©s.
    
    - root_path : Dossier contenant les fichiers source (Rodata).
    - saving_path : Dossier o√π sont stock√©s les fichiers extraits (AdvisorVoice/ClientVoice).
    - audio_extension : Extension des fichiers audio √† rechercher (ex: "mp3").

    Retourne :
    - Liste des fichiers √† traiter.
    """
    root_files = set(f for f in os.listdir(root_path) if f.endswith(f".{audio_extension}"))
    processed_files = set(f for f in os.listdir(saving_path) if f.endswith(".wav"))  # On suppose que les fichiers extraits sont en WAV

    # Ne garder que les fichiers qui ne sont pas d√©j√† trait√©s
    files_to_process = list(root_files - processed_files)
    return [os.path.join(root_path, f) for f in files_to_process]


### 2Ô∏è‚É£ Fonction pour extraire les canaux audio en parall√®le ###
def extract_audio_channel(audio_files, saving_path, min_audio_duration=2, advisor_channel_to_extract=1):
    """
    Extrait un canal audio d'un fichier st√©r√©o et applique une r√©duction de bruit.
    
    - audio_files : Liste des fichiers √† traiter.
    - saving_path : Dossier o√π sauvegarder les fichiers trait√©s.
    - min_audio_duration : Dur√©e minimale (en secondes) pour qu‚Äôun fichier soit trait√©.
    - advisor_channel_to_extract : 0 (canal gauche) ou 1 (canal droit).

    Retourne :
    - Dictionnaire des fichiers ignor√©s avec la raison.
    """
    missed_dict = {}

    if not os.path.exists(saving_path):
        os.makedirs(saving_path)

    for audio_file in audio_files:
        ext = os.path.splitext(audio_file)[1].lower()
        if ext not in [".wav", ".mp3"]:
            missed_dict[audio_file] = "unsupported extension"
            continue

        try:
            track = AudioSegment.from_file(audio_file, format=ext[1:])
            if track.channels != 2:
                raise ValueError("not stereo")
            if len(track) / 1000.0 < min_audio_duration:
                raise ValueError("too short")

            channels = track.split_to_mono()
            if len(channels) < 2:
                raise ValueError("split error")

            selected_channel = channels[advisor_channel_to_extract]

            samples = np.array(selected_channel.get_array_of_samples()).astype(np.float32)
            reduced_noise = nr.reduce_noise(y=samples, sr=selected_channel.frame_rate)

            cleaned_segment = AudioSegment(
                np.int16(reduced_noise).tobytes(),
                frame_rate=selected_channel.frame_rate,
                sample_width=2,
                channels=1
            )

            output_file = os.path.join(saving_path, f"{os.path.splitext(os.path.basename(audio_file))[0]}_cleaned.wav")
            cleaned_segment.export(output_file, format="wav")

        except (CouldntDecodeError, ValueError) as e:
            missed_dict[audio_file] = str(e)
            continue

    return missed_dict


### 3Ô∏è‚É£ Fonction pour ex√©cuter l‚Äôextraction en batch ###
def audio_batch_extraction(saving_path, root_path, min_audio_duration=2, advisor_channel_to_extract=1, batch_size=10, parallel_jobs=4):
    """
    Ex√©cute l‚Äôextraction des canaux en batch avec Joblib.
    
    - saving_path : Dossier o√π enregistrer les fichiers extraits.
    - root_path : Dossier source des fichiers audio (Rodata).
    - min_audio_duration : Dur√©e minimale pour un fichier valide.
    - advisor_channel_to_extract : Canal √† extraire (0=gauche, 1=droit).
    - batch_size : Nombre de fichiers trait√©s en parall√®le.
    - parallel_jobs : Nombre de processus parall√®les.

    Retourne :
    - Un dictionnaire des fichiers ignor√©s et la raison.
    """
    audio_files = retrieve_audio_files(root_path, saving_path)

    if not audio_files:
        print("‚úÖ Tous les fichiers ont d√©j√† √©t√© trait√©s.")
        return {}

    executor = Parallel(n_jobs=parallel_jobs, verbose=0)
    do = delayed(extract_audio_channel)

    tasks = (
        do(audio_files[i : i + batch_size], saving_path, min_audio_duration, advisor_channel_to_extract)
        for i in range(0, len(audio_files), batch_size)
    )

    missed_dicts = executor(tasks)

    # Fusionner les erreurs des batchs
    final_dict = {file_name: missed_reason for sub_dict in missed_dicts for file_name, missed_reason in sub_dict.items()}

    print(f"üéØ Traitement termin√©. {len(audio_files) - len(final_dict)} fichiers trait√©s, {len(final_dict)} ignor√©s.")
    return final_dict


---

üìå Comment l‚Äôutiliser ?

1Ô∏è‚É£ Lister les fichiers non trait√©s

files_to_process = retrieve_audio_files(
    root_path="/chemin/vers/Rodata",
    saving_path="/chemin/vers/AdvisorVoice",
    audio_extension="mp3"
)
print(files_to_process)


---

2Ô∏è‚É£ Lancer le traitement en batch

audio_batch_extraction(
    saving_path="/chemin/vers/AdvisorVoice",
    root_path="/chemin/vers/Rodata",
    min_audio_duration=2,
    advisor_channel_to_extract=1,  # 1 = Advisor (Droite), 0 = Client (Gauche)
    batch_size=10,
    parallel_jobs=4
)


---

üìå Avantages de cette version

‚úÖ G√©n√©rique : Peut √™tre utilis√© pour AdvisorVoice ou ClientVoice en changeant juste un param√®tre.
‚úÖ Scalable : Utilise Joblib pour ex√©cuter plusieurs extractions en parall√®le.
‚úÖ Modulaire : Deux fonctions ind√©pendantes (retrieve_audio_files et audio_batch_extraction).
‚úÖ Rapide : Traite uniquement les fichiers non encore extraits.
‚úÖ Fiable : V√©rifie que l‚Äôaudio est st√©r√©o, pas trop court, et lisible.


---

üî• Maintenant, tu peux lancer √ßa en production ! üöÄ
Si tu veux un ajustement, dis-moi !

